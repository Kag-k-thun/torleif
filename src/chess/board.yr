mod chess::board;

import std::io;

import chess::pieces::_;
import chess::cell;
import chess::movement;

pub class @final Board {

    let dmut _pieces : [&Cell] = [Cell::new () ; new 64];

    pub self () {
        self:.initBoard ();
    }


    /**
     * Move a piece on the board
     * @returns: a new board with pieces moved to the correct positions
     * @throws:
     *    - &InvalidMovement: if the movement does not respect the rules
     * */
    pub fn movePiece (self, mv : Movement)-> &Board
        throws &InvalidMovement
    {
        //        if  (isMovementValid(mv) && )
        mv;
        throw InvalidMovement::new ();
    }


    /**
     * Draw the board to stdout
     * */
    pub fn draw (self) {
        for row in 0u8 .. 8u8 {
            println();
            for col in 0u8 .. 8u8 {
                match self._pieces [row*8u8 + col].getPiece () {
                    Ok (piece : &Piece) => {
                        piece.draw();
                    }
                    _ => { // else empty
                        print ('o'c8);
                    }
                }
            }
        }
    }


    /**
     * Fill the board game with initial positions
     * */
    fn initBoard (mut self) {
        // Fill empty cells and pawns
        for i in 0u8 .. 8u8 for j in 0u8 .. 8u8 {
            if (j == 6u8 || j == 1u8) {
                self._pieces[i+j*8u8] = Cell::new (nbToLetter(i),
                                                j-7u8+1u8,
                                                Pawn::new (
                                                    if j==6u8 Color::WHITE else Color::BLACK
                                                    )?
                    );
            } else {
                self._pieces[i+j*8u8] = Cell::new (nbToLetter(i),
                                                j-7u8+1u8,
                                                ((&Piece)?)::__err__);
            }            
        }

        // Fill specific pieces
        for j in (0u8 .. 8u8).step_by(7u8) for i in 0u8 .. 8u8 {
            match(i) {
                0u8 | 7u8 => {
                    // Rook
                    self._pieces[i+j*8u8] = Cell::new (nbToLetter(i),
                                                    j-7u8+1u8,
                                                    Rook::new (if j==0u8 Color::BLACK else Color::WHITE)?);

                }
                1u8 | 6u8 => {
                    // Knight
                    self._pieces[i+j*8u8] = Cell::new (nbToLetter(i),
                                                    j-7u8+1u8,
                                                    Knight::new (if j==0u8 Color::BLACK else Color::WHITE)?);
                }
                2u8 | 5u8 => {
                    // Bishop
                    self._pieces[i+j*8u8] = Cell::new (nbToLetter(i),
                                                    j-7u8+1u8,
                                                    Bishop::new (if j==0u8 Color::BLACK else Color::WHITE)?);
                }
                3u8 => {
                    // Queen
                    self._pieces[i+j*8u8] = Cell::new (nbToLetter(i),
                                                    j-7u8+1u8,
                                                    Queen::new (if j==0u8 Color::BLACK else Color::WHITE)?);
                }
                4u8 => {
                    // King
                    self._pieces[i+j*8u8] = Cell::new (nbToLetter(i),
                                                    j-7u8+1u8,
                                                    King::new (if j==0u8 Color::BLACK else Color::WHITE)?);
                }
                _ => {}                
            }        
        }
    }
}
